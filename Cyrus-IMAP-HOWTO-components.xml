    <section id="components">
        <title>Components</title>
        <para></para>

        <section>
            <title>Sub-Servers</title>

            <section>
                <title><literal>master</literal></title>

                <para>The <literal>master</literal> process acts as
                the controller for all of the Cyrus sub-servers.
                It performs tasks similar to those performed by
                <literal>cron</literal>, <literal>inetd</literal>, and
                init scripts, although only for Cyrus processes--it is
                not a system-wide replacement for any of these.  It is
                configured through the <filename>cyrus.conf</filename>
                file, which has three sections: <literal>START</literal>,
                <literal>SERVICES</literal>, and
                <literal>EVENTS</literal>.</para>

                <para>Each section has entries which are restricted to a
                single line and composed of a tag name and parameters.
                The tag name should be unique and the exact parameters
                are specific to the particular section.  When Cyrus is
                built with support for TCP Wrappers, the tag name is used
                as the daemon name for <filename>hosts.allow</filename>
                and <filename>hosts.deny</filename>.</para>

                <para>All sections have a <parameter>cmd</parameter>, which
                lists the program and parameters to be used when the entry
                is invoked.  This entry is relative to the <parameter
                class="command">--with-cyrus-prefix</parameter> supplied
                at build time.</para>

                <para>The <literal>START</literal> section contains
                commands that are run then <literal>master</literal> is
                started, much like an init script.  Usually, this section
                contains nothing more than a <parameter>recover</parameter>
                section, for checking the Cyrus databases before starting
                processes that use those databases.  If your system is
                configured to use <literal>idled</literal>, it is also
                started here, because it does not directly listen on a
                network or UNIX socket.</para>

                <para>The following is a minimal listing of the
                <literal>START</literal> section (taken from the example
                <filename>master/conf/normal.conf</filename> from the
                source distribution).
<programlisting>START {
  # do not delete this entry!
  recover       cmd="ctl_cyrusdb -r"
                                                                                                                                                                     
  # this is only necessary if using idled for IMAP IDLE
#  idled                cmd="idled"
}
</programlisting> 
                </para>

                <para>The <literal>SERVICES</literal> section contains
                entries for the various sub-servers that run under the
                system and listen on network sockets.  It is very much
                like <literal>inetd</literal> in this respect.  </para>

                <note> <para>Older versions of Cyrus (1.5 and
                1.6) required <literal>inetd</literal> entries for
                sub-servers.  In 2.0 and later versions, this section of
                <filename>cyrus.conf</filename> replaces that.  If you
                find documentation referring to <literal>inetd</literal>,
                your documentation is obsolete!  </para> </note>

                <para>The <parameter>listen</parameter> parameter lists the
                TCP or UDP port or UNIX domain socket to be listened-on
                for the particular service.  UNIX domain sockets are
                paths in the filesystem and are differentiated from
                ports by starting with a slash (<literal>/</literal>).
                For TCP and UDP sockets, you can give either the
                actual port number or the service name, as resolved
                through <filename>/etc/services</filename> or other
                NSS means.  TCP is the default protocol, although UDP
                can be used with the <parameter>proto</parameter> parameter.
                <parameter>prefork</parameter> and <parameter>maxchild</parameter>
                provide control over the number of processes initially
                forked to help manage load and the maximum number of child
                processes to be started, to prevent too many processes from
                overloading the system.  The <parameter>maxfds</parameter>
                parameter limits the number of open file handles that
                the each process my have open.</para>

                <para>The following is an example listing of the
                <literal>SERVICES</literal> (taken from the example
                <filename>master/conf/normal.conf</filename> from the
                source distribution).
<programlisting># UNIX sockets start with a slash and are put into /var/imap/socket
SERVICES {
  # add or remove based on preferences
  imap          cmd="imapd" listen="imap" prefork=0
  imaps         cmd="imapd -s" listen="imaps" prefork=0
  pop3          cmd="pop3d" listen="pop3" prefork=0
  pop3s         cmd="pop3d -s" listen="pop3s" prefork=0
  sieve         cmd="timsieved" listen="sieve" prefork=0
                                                                                                                                                                     
  # these are only necessary if receiving/exporting usenet via NNTP
#  nntp         cmd="nntpd" listen="nntp" prefork=0
#  nntps                cmd="nntpd -s" listen="nntps" prefork=0
                                                                                                                                                                     
  # at least one LMTP is required for delivery
#  lmtp         cmd="lmtpd" listen="lmtp" prefork=0
  lmtpunix      cmd="lmtpd" listen="/var/imap/socket/lmtp" prefork=0
                                                                                                                                                                     
  # this is only necessary if using notifications
#  notify       cmd="notifyd" listen="/var/imap/socket/notify" proto="udp" prefork=1
}
</programlisting>
                </para>

                <para>The <literal>EVENTS</literal> section is similar
                to <literal>cron</literal> in that it schedules commands
                to be run.  Generally, these commands are for maintenence
                of the various databases Cyrus uses.</para>

                <para>This section has a <parameter>period</parameter>,
                which is an interval in minutes to run the listed command,
                and an <parameter>at</parameter>, which lists a time in
                24-hour format to run the listed command.</para>

                <para>The following is an example listing from the same
                <filename>master/conf/normal.conf</filename>.

<programlisting>EVENTS {
  # this is required
  checkpoint    cmd="ctl_cyrusdb -c" period=30
 
  # this is only necessary if using duplicate delivery suppression,
  # Sieve or NNTP
  delprune      cmd="cyr_expire -E 3" at=0400
 
  # this is only necessary if caching TLS sessions
  tlsprune      cmd="tls_prune" at=0400
}
</programlisting>
</para>

            </section>

            <section>
                <title>imapd</title>

                <para>As you might have guessed, the
                <literal>imapd</literal> sub-server provides IMAP access
                to the mail store to IMAP clients.  It can also provide
                SSL-wrapped IMAP with the <parameter>-s</parameter>
                parameter.</para>
            </section>

            <section>
                <title>pop3d</title>

                <para>The <literal>pop3d</literal> sub-server provides POP3
                access to the mail store.  It can also provide SSL-wrapped
                IMAP with the <parameter>-s</parameter> parameter.</para>
            </section>

            <section>
                <title>timsieved</title>

                <para>The <literal>timsieved</literal> sub-server provides
                the network service for managing Sieve scripts installed on the
                server.</para>
            </section>

            <section>
                <title>lmtpd</title>

                <para>The <literal>lmtpd</literal> sub-server receives
                deliveries into the mail store, either through TCP/IP or
                a UNIX domain socket.</para>
            </section>

            <section>
                <title>notifyd</title>

                <para>The <literal>notifyd</literal> sub-server provides
                an interface sending notifications.  I've never actually
                seen this in use and am not sure what it's purpose is,
                because the docs are a little sketchy.  (FIXME).</para>
            </section>

            <section>
                <title>fud</title>

                <para>The <literal>fud</literal> sub-server provides
                an interface for client access to information about the
                mailbox, such as new mail count, total message count, and
                recent message count.  I've not really seen this in use.
                (FIXME).</para>
            </section>

            <section>
                <title>idled</title>

                <para>Unlike the other sub-servers,
                <literal>idled</literal> is run in the
                <literal>START</literal> section rather
                than the <literal>SERVICE</literal> section.
                <literal>idled</literal> can monitor a mailbox and
                signal to listening <literal>imapd</literal> and
                <literal>pop3d</literal> that new mail has arrived.</para>
            </section>

            <section>
                <title>nntpd</title>

                <para><emphasis>(New with 2.2.)</emphasis> Provides an
                    NNTP interface for shared mailboxes.  (FIXME)</para>
            </section>

            <section>
                <title>mupdate</title>

                <para>Provides <literal>murder</literal> update
                support.</para>
            </section>


            <section>
                <title>smmapd</title>

                <para>Provides a Sendmail socket map daemon which can be
                used by Sendmail to verify that a recipient exists before
                accepting the message.</para>

            </section>
        </section>

        <section>
            <title>Administrative Commands and Utilities</title>

            <section>
                <title>arbitron</title>

                <para>The <literal>abritron</literal> process provides
                readership statistics for mailboxes.  It does not seem
                to be built by default.  It is unclear how commonly used
                or well-maintained it is.</para>

            </section>

            <section>
                <title>arbitronsort.pl</title> 

                <para>Sorts output from <literal>arbitron</literal>.</para>
            
            </section>

            <section>
                <title>cyradm</title>

                <para>The <literal>cyradm</literal> command is a Perl
                script which allows you to manage mailboxes.</para>
            </section>

            <section>
                <title>cyrdump</title>

                <para>(Guess???)  The <literal>cyrdump</literal> command
                dumps mailboxes to a flat-text to standard output, saving
                seen flags and other state. (NB: There appears to be no
                reverse command.)</para>

            </section>

            <section>
                <title>cyr_expire</title> 

                <para>Expires entries from the duplicate delivery database.
                Can also be used to control automatic expiration of messages
                based on mailbox annotations.</para>

            </section>

            <section>
                <title>cyrfetchnews</title>

                <para>Reads articles from an NNTP peer and delivers them
                into Cyrus.</para>

            </section>

            <section>
                <title>chk_cyrus</title>

                <para>The <literal>chk_cyrus</literal> command performs
                consistency checks on Cyrus mailstore.</para>

            </section>

            <section>
                <title>ctl_cyrusdb</title>

                <para>The <literal>ctl_cyrusdb</literal> command performs
                maintenence on the Cyrus databases, such as recovering,
                check-pointing, and archiving.</para>
            </section>

            <section>
                <title>ctl_deliver</title>

                <para>The <literal>ctl_deliver</literal> command
                performs maintenence on the Cyrus duplicate delivery
                database.</para>
            </section>

            <section>
                <title>ctl_mboxlist</title>

                <para>The <literal>ctl_mboxlist</literal> command performs
                maintenence on the Cyrus mailbox list.</para>
            </section>

            <section>
                <title>cvt_cyrusdb</title>

                <para>The <literal>cvt_cyrusdb</literal> command is used
                convert between the various database formats used by Cyrus.
                It can be used, for example, to perform a dump of data from
                binary databases to plain-text flat-file databases, which
                can be more reliably backed-up.</para>

            </section>

            <section>
                <title>deliver</title>

                <para>The <literal>deliver</literal> command used to be
                the point of entry for mail coming from the mail transfer
                agent (Sendmail, Postfix, etc).  It reads messages from
                standard input and delivers into the system.  However, with
                the implementation of LMTP, it is considered obsolete.
                In fact, it is just an LMTP client which delivers to
                <literal>lmtpd</literal>.  It should not be used by the MTA to
                deliver mail into the system unless the MTA does not support
                LMTP.  It can still be useful, however, with external programs
                such as <literal>procmail</literal>, which does not operate
                as an LMTP client.  The <parameter>-q</parameter> may still
                be useful to post over-quota alerts to users' mailboxes.</para>

            </section>

            <section>
                <title>dohash</title>

                <para>The <literal>dohash</literal> utility is a Perl script
                which can be used to migrate from older directory layouts
                and to implement spool directory hashing.</para>

            </section>

            <section>
                <title>ipurge</title>

                <para>The <literal>ipurge</literal> utility expires and
                deletes messages from mailboxes or partitions.  It can be
                configured purge based on message age or mailbox size.</para>

            </section>

            <section>
                <title>mbpath</title>

                <para><literal>mbpath</literal> translates a mailbox name
                into a filesystem path, taking into consideration spool
                hashing and partitions.</para>

            </section>

            <section>
                <title>mkimap</title>

                <para>The <literal>mkimap</literal> command is a Perl script
                which creates the directory heirarchies requires by Cyrus.
                It is generally only needed when installing from source.</para>

            </section>

            <section>
                <title>mknewsgroups</title> 

                <para>(Guess???) Creates newsgroup heirarchies from news
                "active" files.</para>

            </section>

            <section>
                <title>quota</title>

                <para>Not to be confused with the <literal>quota</literal>
                command used for viewing filesystem quotas, this command
                reports on quota usage and can also be used to repair
                inconsistencies. (NB: The Cyrus <literal>quota</literal>
                command is in section 8 of the man pages; the filesystem
                quota is in section 1.)</para>

            </section>

            <section>
                <title>rehash</title>

                <para>The <literal>rehash</literal> script can be used to
                convert between spool hash types: none, basic and full.</para>

            </section>

            <section>
                <title>reconstruct</title>

                <para>The <literal>reconstruct</literal> command is used
                to rebuild mailboxes, which might have suffered database
                corruption or restored from backup.  Note that, despite the
                fact that the man page has listed a <parameter>-m</parameter>
                option to rebuild the master mailbox list, it has never
                actually worked.  It is important, therefore, to maintain
                a backup of the mailbox list, perferably as plain-text.</para>

            </section>

            <section>
                <title>squatter</title>

                <para>The <literal>squatter</literal> utility may be one of
                the most overlooked utilities in the Cyrus distribution.
                It builds full-text mailbox indexes which allow very fast
                server-side searching.</para>

            </section>

            <section>
                <title>tls_prune</title>

                <para><literal>tls_prune</literal> removed expired TLS
                sessions from the session database.</para>

            </section>

            <section>
                <title>translatesieve</title>

                <para>The <literal>translatesieve</literal> command is
                used to update Sieve scripts when implementing alternative
                namespaces.</para>

            </section>

            <section>
                <title>undohash</title>

                <para>The <literal>undohash</literal> command flattens
                directory heirarchies which had been previously hashed.</para>

            </section>

            <section>
                <title>upgradesieve</title>

                <para>This command migrates the <literal>timsieved</literal>
                storage from older versions, which used to use a hardlink
                to indicate the active script but now uses a symlink.</para>

            </section>
        </section>
    </section>
<!-- vim:ft=docbkxml
-->
